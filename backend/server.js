const express = require("express");
const mysql = require("mysql2");
const cors = require("cors");
require("dotenv").config();

const app = express();

app.use(cors());
app.use(express.json());

// üìå Connexion √† la base de donn√©es MySQL
const db = mysql.createConnection({
  host: process.env.DB_HOST || "localhost",
  user: process.env.DB_USER || "root",
  password: process.env.DB_PASSWORD || "1234",
  database: process.env.DB_NAME || "cine_delices",
});

db.connect((err) => {
  if (err) {
    console.error("‚ùå Erreur de connexion √† MySQL:", err);
    process.exit(1); // üöÄ Arr√™te le serveur si la connexion √©choue
  }
  console.log("‚úÖ Connect√© √† MySQL");
});

// üìå Importer les routes
const authRoutes = require("./routes/auth");
const userRoutes = require("./routes/user");
const adminRoutes = require("./routes/admin");

app.use("/auth", authRoutes);
app.use("/user", userRoutes);
app.use("/admin", adminRoutes);

// üìå Importer les middlewares
const authenticateUser = require("./middleware/auth");
const authorizeAdmin = require("./middleware/admin");

// üìå Route prot√©g√©e pour le tableau de bord (admin uniquement)
app.get("/admin/dashboard", authenticateUser, authorizeAdmin, (req, res) => {
  res.json({ message: "Bienvenue sur le tableau de bord Admin" });
});

// üìå Route pour r√©cup√©rer les recettes class√©es par cat√©gorie
app.get("/recipes", (req, res) => {
  const sql = `
    SELECT 
      r.code_recipe, 
      r.name AS recipe_name, 
      r.picture, 
      r.description,
      COALESCE(c.name, 'Autre') AS category,  -- G√®re les recettes sans cat√©gorie
      w.title AS film_serie
    FROM recipe r
    LEFT JOIN recipe_category rc ON r.code_recipe = rc.code_recipe
    LEFT JOIN category c ON rc.code_category = c.code_category
    LEFT JOIN recipe_work rw ON r.code_recipe = rw.code_recipe
    LEFT JOIN work w ON rw.code_work = w.code_work
    ORDER BY FIELD(c.name, 'Entr√©e', 'Plat', 'Dessert', 'Autre'), r.code_recipe; -- Trie dans l‚Äôordre logique
  `;

  db.query(sql, (err, result) => {
    if (err) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des recettes :", err);
      return res.status(500).json({ error: "Erreur serveur" });
    }
    console.log(
      `‚úÖ ${result.length} recettes r√©cup√©r√©es et tri√©es par cat√©gorie !`
    );
    res.json(result);
  });
});

// üìå Route pour r√©cup√©rer une recette par son ID
app.get("/recipes/:id", (req, res) => {
  const recipeId = req.params.id;
  const sql = `
    SELECT 
      r.code_recipe, 
      r.name AS recipe_name, 
      r.picture, 
      r.description,
      COALESCE(c.name, 'Autre') AS category, 
      w.title AS film_serie
    FROM recipe r
    LEFT JOIN recipe_category rc ON r.code_recipe = rc.code_recipe
    LEFT JOIN category c ON rc.code_category = c.code_category
    LEFT JOIN recipe_work rw ON r.code_recipe = rw.code_recipe
    LEFT JOIN work w ON rw.code_work = w.code_work
    WHERE r.code_recipe = ?;
  `;

  db.query(sql, [recipeId], (err, result) => {
    if (err) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration de la recette :", err);
      return res.status(500).json({ error: "Erreur serveur" });
    }
    if (result.length === 0) {
      console.log("‚ö†Ô∏è Recette non trouv√©e :", recipeId);
      return res.status(404).json({ error: "Recette non trouv√©e" });
    }
    console.log(`‚úÖ Recette ${recipeId} r√©cup√©r√©e avec succ√®s !`);
    res.json(result[0]);
  });
});

// üìå Route de test pour voir si le serveur tourne
app.get("/", (req, res) => {
  res.send("üöÄ API CineD√©lices fonctionne !");
});

// üìå D√©marrer le serveur et g√©rer les erreurs de port
const PORT = process.env.PORT || 5002;
const server = app.listen(PORT, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur http://localhost:${PORT}`);
});

server.on("error", (err) => {
  if (err.code === "EADDRINUSE") {
    console.error(`‚ùå Port ${PORT} d√©j√† utilis√©. Tente de lib√©rer le port...`);
    process.exit(1);
  } else {
    console.error("‚ùå Erreur serveur :", err);
  }
});
